<% if video.kind_of?(Material) || video.kind_of?(Medium) %>
  <%
  assessments = []
  if @klass && @lecture && video.kind_of?(Material) # do we need to add !request.xhr?
    assessments = @lecture.assessments.open(@klass).where('ready = TRUE and invideo_id = :vid', :vid => video.id).to_a
  end
  %>
  <%
  medium = video.kind_of?(Material) ? video.medium : video
  video_id = "me_m_#{medium.id}"
  container_id = "me_m_#{medium.id}_container"
  youtube = ( medium.content_type =~ /link\/youtube/ )

  options = {
    :id => video_id,
    :class => assessments.blank? ? 'mediaelementjs' : 'mediaelementjs_with_invideo_quiz',
    :poster => poster.present? ? poster.at_url : nil,
    :width => '100%',
    :height => '100%',
    :stype => 'width: 100%; height: 100%;',
    :title => medium.name,
    :"data-uid" => video_id,
    :"data-autoresize" => 'fit',
    :preload => 'none',
    :autoplay => autoplay
  }
  %>
  <div id="<%= container_id %>" class="video-container <%= style_class %>">
    <% if youtube %>
      <%= content_tag :video, options do %>
        <%= tag :source,  :type => 'video/youtube', :src => "https://youtu.be/#{medium.at_url}" %>
      <% end %>
    <% else %>
      <%= content_tag :video, '', options.merge(src: medium.at_url) %>
    <% end %>
  </div>

  <% unless assessments.blank? %>
    <div id="assessment-attempt" style="display: none; background: #fff;"></div>
    <script>
      var playerId = '<%= container_id %>';
      window.player = null;
      var assessments = <%= (assessments.map do |a|
        {
          :id => a.id, :at => a.invideo_at, :taken => !a.can_be_taken?(@klass, current_student),
          :path => new_learn_klass_assessment_attempt_path(@klass, a, :format => :js)
        }
      end).to_json.html_safe %>;
    </script>
  <% end %>
<% else %>
  <div class="video-container <%= style_class %>">
    <video class="sublime" poster="<%= poster %>" width="640" height="360" data-autoresize="fit" preload="none">
      <source src="<%= video %>" />
    </video>
  </div>
<% end %>
